// Conecta Prisma con tu base de datos.
// Sustituye "postgresql" por "sqlite", "mysql" u otro proveedor si corresponde,
// y asegúrate de que DATABASE_URL esté definida en tu .env.
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Genera el cliente de Prisma para TypeScript/JavaScript.
generator client {
  provider = "prisma-client-js"
}

// Enum para el estado de las citas.
enum AppointmentStatus {
  SCHEDULED
  CANCELLED
  COMPLETED
}

// Modelo del barbero.
// Añade otros campos según tus necesidades (e.g. foto, experiencia).
model Barber {
  id           Int          @id @default(autoincrement())
  name         String
  appointments Appointment[]
}

// Modelo del servicio.
// Puedes añadir un campo `description` o similar si lo necesitas.
model Service {
  id           Int          @id @default(autoincrement())
  name         String
  price        Int
  duration     Int
  appointments Appointment[]
}

model GalleryImage {
  id        Int       @id @default(autoincrement())
  url       String    // URL de la imagen
  title     String?   // Título opcional o descripción
  createdAt DateTime  @default(now())

  @@map("gallery_images") // opcional: nombre de tabla personalizado
}

model Comment {
  id         Int       @id @default(autoincrement())
  nombre     String
  comentario String
  createdAt  DateTime  @default(now())

  @@map("comments") // opcional: nombre de tabla personalizado
}

// Modelo de la cita.
model Appointment {
  id                 Int                @id @default(autoincrement())
  customerName       String
  whatsapp           String
  /// Solo dígitos para comparaciones (útil para buscar por número normalizado)
  whatsappNormalized String             @default("")
  barber             Barber             @relation(fields: [barberId], references: [id])
  barberId           Int
  service            Service            @relation(fields: [serviceId], references: [id])
  serviceId          Int
  start              DateTime
  end                DateTime
  /// Fecha de la cita (sin hora) para limitar a una cita por día
  appointmentDate DateTime @db.Date @default(now())
  status             AppointmentStatus  @default(SCHEDULED)
  notes              String?
  createdAt          DateTime           @default(now())

  // Índices para acelerar consultas por barbero y servicio
  @@index([barberId, start, end])
  @@index([serviceId])
  // Índice compuesto para validar una cita por día por número normalizado
  @@index([whatsappNormalized, appointmentDate])
}
