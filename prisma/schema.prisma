// Conecta Prisma con tu base de datos.
// Sustituye "postgresql" por "sqlite", "mysql" u otro proveedor si corresponde,
// y aseg√∫rate de que DATABASE_URL est√© definida en tu .env.
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Genera el cliente de Prisma para TypeScript/JavaScript.
generator client {
  provider = "prisma-client-js"
}

// Enum para el estado de las citas.
enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  CANCELLED
  COMPLETED
}

// üëá Enum para estado de pago (nuevo)
enum PaymentStatus {
  UNPAID
  PAID
  REFUNDED
}

// Modelo del barbero.
model Barber {
  id           Int           @id @default(autoincrement())
  name         String
  appointments Appointment[]
}

// Modelo del servicio.
model Service {
  id           Int           @id @default(autoincrement())
  name         String
  price        Int
  duration     Int
  appointments Appointment[]
}

model GalleryImage {
  id        Int      @id @default(autoincrement())
  url       String // URL de la imagen
  title     String? // T√≠tulo opcional o descripci√≥n
  createdAt DateTime @default(now())

  @@map("gallery_images") // opcional: nombre de tabla personalizado
}

model Comment {
  id        Int      @id @default(autoincrement())
  name      String
  message   String
  createdAt DateTime @default(now())
  // üëá moderaci√≥n (nuevo)
  visible   Boolean  @default(true)

  @@map("comments") // opcional: nombre de tabla personalizado
}

// Modelo de la cita.
model Appointment {
  id                 Int               @id @default(autoincrement())
  customerName       String
  whatsapp           String
  /// Solo d√≠gitos para comparaciones (√∫til para buscar por n√∫mero normalizado)
  whatsappNormalized String            @default("")
  barber             Barber            @relation(fields: [barberId], references: [id])
  barberId           Int
  service            Service           @relation(fields: [serviceId], references: [id])
  serviceId          Int
  start              DateTime
  end                DateTime
  /// Fecha de la cita (sin hora) para limitar a una cita por d√≠a
  appointmentDate    DateTime          @default(now()) @db.Date
  status             AppointmentStatus @default(SCHEDULED)
  notes              String?
  createdAt          DateTime          @default(now())

  // üëá pagos (nuevo)
  paymentStatus PaymentStatus @default(UNPAID)
  paidAt        DateTime?
  /// Precio congelado al agendar (CLP); usa service.price al crear
  priceSnapshot Int           @default(0)

  // √çndices para acelerar consultas por barbero y servicio
  @@index([barberId, start, end])
  @@index([serviceId])
  // √çndice compuesto para validar una cita por d√≠a por n√∫mero normalizado
  @@index([whatsappNormalized, appointmentDate])
}
